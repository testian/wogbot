package modules;

import logging.*;

import org.schwering.irc.lib.IRCUser;

import utils.*;
import java.util.*;
import java.text.*;
import core.Bot;
import core.BotCommand;
import core.BotException;

public class SeenCommand implements BotCommand {

	public String getUsage() {
		// TODO Auto-generated method stub
		return "<Nickname>";
	}

	public void execute(Bot bot, String channel, IRCUser user, String message)
			throws BotException {
		SimpleStringTokenizer messageToken = new SimpleStringTokenizer(message);
		if (!messageToken.hasMoreTokens()){bot.msg(channel, "Du musst einen Nicknamen angeben");return;}
		String nickName = messageToken.nextToken();
		List<String> names = new ChannelRequest(bot, channel).getNames();
		if (names.contains(nickName)){bot.msg(channel, nickName + " ist gerade im Channel");return;}
		LogEvent lastEvent=null;
		String lastMessage=null;
		for (LogEvent t : bot.getLog().iterable(channel)) {
		if (t instanceof AbstractMessageEvent)
		{
		AbstractMessageEvent msg = (AbstractMessageEvent)t;
		if (msg.getUser().getNick().equals(nickName))
		{
			lastEvent = msg;
			if (msg instanceof MessageEvent)
			{
				lastMessage=((MessageEvent)msg).logString();
			}
		}
		}
		else if (t instanceof JoinEvent)
		{
			JoinEvent join = (JoinEvent)t;
			if (join.getUser().getNick().equals(nickName))
			{
				lastEvent = join;
			}
		}
		else if (t instanceof KickEvent)
		{
			KickEvent kick = (KickEvent)t;
			if (kick.getKickedUser().equals(nickName))
			{
				lastEvent = kick;
			}
		}
		}
		if (lastEvent==null){bot.msg(channel, "Keine Aufzeichnung von " + nickName);}
		else {
			bot.msg(channel, nickName + " wurde in " + channel + " zuletzt gesehen: " + new SimpleDateFormat("EEEEE, d. MMMMM yyyy HH:mm:ss",Locale.GERMAN).format(new Date(lastEvent.getTimestamp())) + ": " + lastEvent.logString());
			if (lastMessage!=null){bot.msg(channel, "Letzte Worte: " + lastMessage);}
		}

	}

	public String getName() {
		// TODO Auto-generated method stub
		return "seen";
	}

}
